React.js : Meta(전 Facebook)이 개발한 오픈소스 JS 라이브러리 
 - 대규모 웹 서비스의 UI를 더 편하게 개발하기 위해 만들어짐. 

React의 기술적인 특징 
1. 컴포넌트를 기반으로 UI를 표현한다
 - 컴포넌트 : '구성요소' 
 - 일반적인 웹 페이지가 Header, Main, Footer로 구분되는데, 
    React에서는 각각을 header.js, main.js, Footer.js라는 js 파일에 
    component 단위로 나눠서 모듈화해서 보관할 수 있다

 -컴포넌트를 js 파일로 모듈화했을 떄 장점 : 중복 코드를 제거 가능 
 - 이를 이용하지 않으면, 각 페이지마다 html로 직접 헤더를 마크업해줘야 함. 
    - 중복 코드가 발생해서, 페이지의 수가 늘어날수록 코드를 수정하기 어려워진다. 

  - React : 여러 페이지에서 공통적으로 사용되는 요소를 Header 컴포넌트로 만들고, 여러 페이지에서 불러와서 사용하면 되기 때문에 
  중복코드 발생 X . 유지보수 차원에서도 용이 


2. 화면 업데이트 구현이 쉽다
 - 업데이트 : 사용자의 행동(클릭, 드래그)에 따라 웹 페이지가 스스로 모습을 바꿔 상호작용하는 것
 - React : 선언형 프로그래밍이라는 방식으로 작동
   - 선언형 프로그래밍 : 과정은 생략하고 목적만 간결히 명시하는 방법
     ex. 식당에서 '토마토 파스타 하나 주세요' 라고 하는 것과 같음. 
   - 목적만 깔끔하게 명시하기 때문에 코드가 간결함

  vs. 명령형 프로그래밍 : 목적을 이루기 위한 모든 일련의 과정을 설명하는 방식 
     ex. 식당에서 '주방으로 가서 면 100g을 꺼내서, 뜨거운 물에 (...)'


원리 : 리액트는 컴포넌트 단위로 페이지를 나누는데, 컴포넌트 안에 state라는 상태를 저장하는 아주 특수한 변수를 저장할 수 있다 
 - State 값이 바뀌면 컴포넌트가 바뀐 state 값에 따라서 각각 다른 UI를 화면에 렌더링하도록 해줌.
 - 렌더링 : 웹 페이지 화면에 UI요소를 그려내는 것 
 
 따라서, 화면에 업데이트가 필요할 때 컴포넌트가 가지고 있는 State 변수 값만 바꾸면 
 자동으로 다른 버전의 UI를 렌더링하도록 설정할 수 있어서 아주 편하고 간결하게 업데이트 구현 가능. 

 결론: 리액트에서는 복잡한 동작을 직접 정의할 필요 없이, 특정 변수의 값만 바꾸는 것만으로도 화면을 업데이트 시킬 수 있다. 




3. 화면 업데이트가 빠르게 처리된다

<브라우저의 동작 원리>
Critical Rendering Path 
1. HTML 과 CSS를 각각 DOM 이라는 것과 CSS ObjectMODEL 이라는 것으로 변환. 

 - DOM : Document Object Model (문서 객체 모델)
   HTML의 코드를 브라우저가 더 이해하기 쉬운 방식으로 변환한 객체.
   HTML로 표현한 요소들의 위치, 배치, 모양에 관한 모든 정보가 있음 

 - CSSOM : 요소들의 스타일과 관련된 모든 정보가 있음 

2. 만들어진 DOM 과 CSS 오브젝트 모델을 합쳐서 '렌더트리'를 만든다
 - Render Tree : 웹페이지의 청사진 역할

3. Layout: 웹페이지 안에 요소의 배치를 잡는 작업

4. Painting: 실제로 화면에 요소를 그려내는 과정 

Q. 화면의 업데이트는 어떻게 발생하는가?
 - JS가 DOM을 수정하게 되면 발생 
 - DOM 이 수정되면 JS는 critical Rendering path 전체 과정을 다시 진행

Layout과 Painting 이 다시 진행되는 것 : Reflow와 Painting (오래 걸림) 

 - JS에서 reflow 와 repaint가 많이 생기면 성능이 정말 안좋아짐

따라서, DOM을 자주 수정하도록 코드를 작성하면 안됨. 

JS에서 업데이트를 효율적으로 구현하려면 
 - 다양한 업데이트 중 동시에 발생한 업데이트를 모아서 다 모였다면 한번에 수정해서 DOM 변화를 최소화해야하는데, 
 서비스의 규모가 커질수록 어려워짐. 

 React는 이 과정(동시에 발생한 업데이트들을 모아서 DOM 수정 횟수를 최소화하는 작업)을 자동으로 해준다. 
 (Feat.Virtual DOM) 

 동시에 업데이트 3개가 발생하면, 그냥 JS 객체인 Virtual DOM에 발생한 업데이트들을 순서대로 반영. 
  -> 이 업데이트들이 모였다면 한번에 실제 DOM 에 반영해줌. 

  따라서, 동시에 아무리 많은 수의 업데이트가 발생했더라도 VIrtual DOM 에 한번 다 모였다가 DOM 에 반영한다. 

