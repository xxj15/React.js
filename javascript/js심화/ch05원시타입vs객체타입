JS의 DataType
구분 이유 : 값이 저장되거나 복사되는 과정이 서로 다름

(1) 원시타입 : Number, String, Boolean, Null, Undefined
  - 값 자체로써 변수에 저장되고 복사됨
  - 불변값이라고도 부름. (메모리 공간에 저장된 원본 데이터의 값이 변경되지 않기 때문에)

let p1 = 1; p1 -> 1 (memory)
let p2 = 2; p2 -> 1 (memory)
p2 = 2;     p2 -> 2 (memory)
실제 메모리의 값은 수정되지 않음. 


(2) 객체 타입 : Object - Array, Function, RegexExp 
  - 참조값(값에 접근할 수 있는 주소값) 을 통해 변수에 저장되고 복사됨
  - 가변값 (메모리 값 수정 O)

let o1 = { name : "sj "}; o1 -> 0x0000C (참조값(주소값) 가리킴) (memory)
                                -> {name : "sj"}

let o2 = 01; o2 -> 0x0000C (o1이랑 같은 주소 가리킴)
o2.name = "홍길동"; // o2 변수가 기리키고 있던 값을 메모리 상에서 수정하기 때문에 
{name = "홍길동"} 으로 o1, o2 모두 바뀜뀜
(얕은 복사)


* 객체 타입 주의사항
1. 의도치 않게 값이 수정될 수 있다 
let o1 = { name : "sj "}
let o2 = { ...o1 } 
 => 객체의 값 복사할 때에는 spread 연산자등을 이용해 새로운 객체 생성하면서 내부 프로퍼티만 가져오는 방법 사용해야함
 (깊은 복사사)


2. 객체간의 비교는 기본적으로 참조값을 기준으로 이루어진다 
let o1 = { name : "sj "};
let o2 = o1;
let o3 = {...o1}; 

console.log(o1 === o2); // True
console.log(o1 === o3); // False !!

 * 얕은 비교 : o1 === o2 (참조값을 기준으로 비교 )
 * 깊은 비교 : JSON.stringify(o1) === JSON.stringify(o2)
    - 객체를 문자열로 변환하여 비교 


3. 배열과 함수도 사실 객체이다
 - 배열과 함수도 추가적인 프로퍼티나 메서드 가질 수 있다. 

