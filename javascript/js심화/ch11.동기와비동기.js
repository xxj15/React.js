// 동기: 여러개의 작업을 하나씩 순서대로 작업
// Javascript는 "동기"적으로 코드를 실행한다.
// 동기 방식의 치명적 단점 : 하나의 Task가 오래걸리면, 다음 태스크를 처리할 수 없어서 전체 프로그램 성능을 저하시킴.
// Java, C# 등에서 해결 방법 : 멀티쓰레드
// JS 엔진에는 쓰레드가 1개밖에 없음. -> 해결 방법 : 비동기

// 비동기 : 작업을 순서대로 처리하지 않음. (작업을 동시에 진행하는게 가능)

// 동기적 실행
console.log(1);
console.log(3);

// 비동기적 실행 - setTimeout 함수 호출
console.log(1);

setTimeout(() => {
  console.log(2);
}, 3000); // 숫자값에 해당하는 ms만큼 기다렸다가 실행
// 3초를 세는 타이머만 시작. -> 3초 후 setTImeout 함수에서 내부적으로 콜백함수 시행

console.log(3);

// 쓰레드가 하나뿐인 JS가 동시에 여러개의 작업 처리할 수 있는 이유
// JS에서 비동기 작업들은 JS 엔진이 아닌 Web APIs라는 브라우저가 직접 관리하는 별도의 공간에서 따로 실행되기 때문.

// Web APIs : 브라우저가 직접 관리하는 별도의 영역

// Web Browser 안에 JS Engine, Web APIs가 있음.
// JS 엔진에서 console.log(1); 실행한 후, setTimeout(...)를 Web APIs에 setTImeout 타이머와 콜백함수를 같이 보냄
// 타이머가 완료되면 전달받았던 콜백함수를 JS 엔진에 다시 돌려보냄.
